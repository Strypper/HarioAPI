// <auto-generated />
using System;
using Hairo.Entities.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hairo.Entities.Migrations
{
    [DbContext(typeof(HairoDbContext))]
    partial class HairoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Hairo.Entities.ChildService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChildServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ChildServices");
                });

            modelBuilder.Entity("Hairo.Entities.ChildServicePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ChildServiceId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChildServiceId");

                    b.ToTable("ChildServicePhoto");
                });

            modelBuilder.Entity("Hairo.Entities.Location.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Hairo.Entities.Location.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Hairo.Entities.Location.LocationAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StoreId");

                    b.ToTable("LocationAddresses");
                });

            modelBuilder.Entity("Hairo.Entities.Location.LocationPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("LocationPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("LocationPhotos");
                });

            modelBuilder.Entity("Hairo.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("StoreService")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Hairo.Entities.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("StoreRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Hairo.Entities.ChildService", b =>
                {
                    b.HasOne("Hairo.Entities.Service", null)
                        .WithMany("ChildServices")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("Hairo.Entities.ChildServicePhoto", b =>
                {
                    b.HasOne("Hairo.Entities.ChildService", null)
                        .WithMany("ChildServicePhotos")
                        .HasForeignKey("ChildServiceId");
                });

            modelBuilder.Entity("Hairo.Entities.Location.District", b =>
                {
                    b.HasOne("Hairo.Entities.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Hairo.Entities.Location.LocationAddress", b =>
                {
                    b.HasOne("Hairo.Entities.Location.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Hairo.Entities.Location.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("Hairo.Entities.Store", null)
                        .WithMany("Locations")
                        .HasForeignKey("StoreId");

                    b.Navigation("City");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Hairo.Entities.Location.LocationPhoto", b =>
                {
                    b.HasOne("Hairo.Entities.Store", null)
                        .WithMany("LocationPhotos")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Hairo.Entities.Service", b =>
                {
                    b.HasOne("Hairo.Entities.Store", null)
                        .WithMany("Services")
                        .HasForeignKey("StoreId");
                });

            modelBuilder.Entity("Hairo.Entities.ChildService", b =>
                {
                    b.Navigation("ChildServicePhotos");
                });

            modelBuilder.Entity("Hairo.Entities.Service", b =>
                {
                    b.Navigation("ChildServices");
                });

            modelBuilder.Entity("Hairo.Entities.Store", b =>
                {
                    b.Navigation("LocationPhotos");

                    b.Navigation("Locations");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
